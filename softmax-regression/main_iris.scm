(load "./softmax-regressor.scm")
(use text.csv)
(use rfc.http)

(define (parse-csv csv-string)
  (cdr (call-with-input-string csv-string
	(cut port->list (make-csv-reader #\,) <>))))

(define (load-iris)
  (receive (status header body)
           (http-get "raw.githubusercontent.com" "/pandas-dev/pandas/master/pandas/tests/data/iris.csv")
           (let* ((table (parse-csv body))
                  (l-rev (reverse (transpose table)))
                  (y (car l-rev))
                  (X (transpose (map (lambda (l) (map string->number l)) (reverse (cdr l-rev))))))
             (values X y))))

(define (main args)
  (receive
    (X y)
    (load-iris)
    (let* ((y-label (categorize-string-class y))
           (y-one-hot (encode-one-hot y-label))
           (X-normalized (normalize-features X))
           (X-with-bias (map (lambda (l) (cons 1 l)) X-normalized))
           (model (create-SGD (length (car X-with-bias)) (length (car y-one-hot)) :eta 0.1 :var 1 :alpha 0.005))
           (minimum-val-error +inf.0)
           (best-epoch 0)
           (best-model (create-SGD (length (car X-with-bias)) (length (car y-one-hot)) :eta 0.1 :var 1 :alpha 0.005)))
      (receive
        (X-train-val y-train-val X-test y-test)
        (proportional-train-test-split 0.2 X-with-bias y-one-hot)
        (receive
          (X-train y-train X-val y-val)
          (proportional-train-test-split 0.25 X-train-val y-train-val)
          (for-each
            (lambda (epoch)
              ((model 'fit) X-train y-train)
              (let* ((l2-loss (* 0.5 ((model 'get-alpha)) (apply + (map (lambda (l) (apply + (map (lambda (x) (* x x)) (cdr l)))) ((model 'get-theta))))))
                     (p-train-predict ((model 'predict-proba) X-train))
                     (p-val-predict ((model 'predict-proba) X-val))
                     (train-error (+ (cross-entropy-error p-train-predict y-train) l2-loss))
                     (val-error (+ (cross-entropy-error p-val-predict y-val) l2-loss)))
                (cond ((zero? (modulo epoch 50)) (print "Epoch: " epoch ", Train loss: " train-error ", Validation loss: " val-error)))
                (cond ((< val-error minimum-val-error)
                       (set! minimum-val-error val-error)
                       (set! best-epoch epoch)
                       ((best-model 'set-theta!) ((model 'get-theta)))
                       ))))
            (iota 5000 1))
          (print "----------------------------")
          (let* ((l2-loss (* 0.5 ((best-model 'get-alpha)) (apply + (map (lambda (l) (apply + (map (lambda (x) (* x x)) (cdr l)))) ((best-model 'get-theta))))))
                 (p-train-predict ((best-model 'predict-proba) X-train))
                 (p-val-predict ((best-model 'predict-proba) X-val))
                 (train-error (+ (cross-entropy-error p-train-predict y-train) l2-loss))
                 (val-error (+ (cross-entropy-error p-val-predict y-val) l2-loss)))
            (print "Best epoch: " best-epoch ", Train loss: " train-error ", Validation loss: " val-error)))
        (print "----------------------------")
        (let* ((y-test-predict ((best-model 'predict) X-test))
               (num-true (length (filter (lambda (x) x) (map equal? y-test-predict y-test))))
               (accuracy (exact->inexact (/ num-true (length y-test)))))
          (print "Accuracy (test): " accuracy))))) 0)
